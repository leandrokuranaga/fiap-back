// <auto-generated />
using System;
using Fiap.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fiap.Infra.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250406185714_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fiap.Domain.GameAggregate.GameDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Games", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Genre = "Action RPG",
                            Name = "The Legend of Zelda: Breath of the Wild",
                            Price = 299.0,
                            PromotionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Genre = "Action RPG",
                            Name = "The Witcher 3: Wild Hunt",
                            Price = 39.990000000000002,
                            PromotionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Genre = "Action-adventure",
                            Name = "Red Dead Redemption 2",
                            Price = 49.990000000000002,
                            PromotionId = 3
                        },
                        new
                        {
                            Id = 4,
                            Genre = "Action RPG",
                            Name = "Dark Souls III",
                            Price = 29.989999999999998,
                            PromotionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Genre = "Action-adventure",
                            Name = "God of War",
                            Price = 39.990000000000002,
                            PromotionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Genre = "Sandbox",
                            Name = "Minecraft",
                            Price = 26.949999999999999,
                            PromotionId = 1
                        },
                        new
                        {
                            Id = 7,
                            Genre = "First-person shooter",
                            Name = "Overwatch",
                            Price = 39.990000000000002,
                            PromotionId = 3
                        },
                        new
                        {
                            Id = 8,
                            Genre = "Action-adventure",
                            Name = "The Last of Us Part II",
                            Price = 49.990000000000002
                        });
                });

            modelBuilder.Entity("Fiap.Domain.LibraryAggregate.LibraryDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Library", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Fiap.Domain.LibraryGameAggregate.LibraryGameDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("LibraryId")
                        .HasColumnType("integer");

                    b.Property<double>("PricePaid")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryGames", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            LibraryId = 1,
                            PricePaid = 200.0,
                            PurchaseDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            GameId = 2,
                            LibraryId = 1,
                            PricePaid = 50.0,
                            PurchaseDate = new DateTime(2022, 3, 9, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            GameId = 3,
                            LibraryId = 1,
                            PricePaid = 199.0,
                            PurchaseDate = new DateTime(2020, 11, 22, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            GameId = 4,
                            LibraryId = 1,
                            PricePaid = 60.0,
                            PurchaseDate = new DateTime(2019, 5, 3, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Fiap.Domain.PromotionAggregate.PromotionDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Promotion", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 1.0,
                            EndDate = new DateTime(2025, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Discount = 2.0,
                            EndDate = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2025, 6, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Discount = 3.0,
                            EndDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            StartDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Fiap.Domain.UserAggregate.UserDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TypeUser")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Email = "admin@gmail.com",
                            Name = "Admin",
                            Password = "$2a$11$GtOwXg2TwrUQJZJP0rfbDO93ZdUuDAE6RrfI8sFSa5Zq1/hXQ6CKq",
                            TypeUser = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Email = "user@gmail.com",
                            Name = "User",
                            Password = "$2a$11$GtOwXg2TwrUQJZJP0rfbDO93ZdUuDAE6RrfI8sFSa5Zq1/hXQ6CKq",
                            TypeUser = "User"
                        });
                });

            modelBuilder.Entity("Fiap.Domain.GameAggregate.GameDomain", b =>
                {
                    b.HasOne("Fiap.Domain.PromotionAggregate.PromotionDomain", "Promotion")
                        .WithMany("Games")
                        .HasForeignKey("PromotionId");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Fiap.Domain.LibraryAggregate.LibraryDomain", b =>
                {
                    b.HasOne("Fiap.Domain.UserAggregate.UserDomain", "User")
                        .WithOne("Library")
                        .HasForeignKey("Fiap.Domain.LibraryAggregate.LibraryDomain", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fiap.Domain.LibraryGameAggregate.LibraryGameDomain", b =>
                {
                    b.HasOne("Fiap.Domain.GameAggregate.GameDomain", "Game")
                        .WithMany("Libraries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fiap.Domain.LibraryAggregate.LibraryDomain", "Library")
                        .WithMany("Games")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("Fiap.Domain.GameAggregate.GameDomain", b =>
                {
                    b.Navigation("Libraries");
                });

            modelBuilder.Entity("Fiap.Domain.LibraryAggregate.LibraryDomain", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Fiap.Domain.PromotionAggregate.PromotionDomain", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Fiap.Domain.UserAggregate.UserDomain", b =>
                {
                    b.Navigation("Library")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
